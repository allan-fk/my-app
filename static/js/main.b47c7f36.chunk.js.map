{"version":3,"sources":["Pages/Login.js","serviceWorkerRegistration.js","reportWebVitals.js","logo.svg","index.js"],"names":["Login","useState","isVisible","setIsVisible","span","name","labelCol","wrapperCol","initialValues","remember","onFinish","values","console","log","onFinishFailed","errorInfo","autoComplete","style","display","Item","label","Password","valuePropName","offset","type","htmlType","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Toast","useReactPWAInstall","pwaInstall","supported","isInstalled","onClick","title","logo","features","description","alert","ReactDOM","render","StrictMode","enableLogging","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b47c7f36.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n// import logo from \"./logo.svg\";\r\n//import \"./App.css\";\r\nimport { Form, Input, Button, Checkbox, Col, Row } from \"antd\";\r\n\r\nconst Login = () => {\r\n  const [isVisible, setIsVisible] = useState(true);\r\n\r\n  const onFinish = (values) => {\r\n    console.log(\"Success:\", values);\r\n    setIsVisible(false);\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log(\"Failed:\", errorInfo);\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col span={4}>\r\n        <Form\r\n          name=\"basic\"\r\n          labelCol={{\r\n            span: 8,\r\n          }}\r\n          wrapperCol={{\r\n            span: 16,\r\n          }}\r\n          initialValues={{\r\n            remember: true,\r\n          }}\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          autoComplete=\"off\"\r\n          style={{ display: !isVisible && \"none\" }}\r\n        >\r\n          <Form.Item label=\"Username\" name=\"username\">\r\n            <Input />\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"Password\" name=\"password\">\r\n            <Input.Password />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"remember\"\r\n            valuePropName=\"checked\"\r\n            wrapperCol={{\r\n              offset: 8,\r\n              span: 16,\r\n            }}\r\n          >\r\n            <Checkbox>Remember me</Checkbox>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            wrapperCol={{\r\n              offset: 8,\r\n              span: 16,\r\n            }}\r\n          >\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Login from \"./Pages/Login\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ReactPWAInstallProvider, { useReactPWAInstall } from \"react-pwa-install\";\nimport logo from \"./logo.svg\";\nimport \"antd/dist/antd.css\";\n\nfunction Toast() {\n  const { pwaInstall, supported, isInstalled } = useReactPWAInstall();\n\n  const handleClick = () => {\n    pwaInstall({\n      title: \"Install Web App\",\n      logo: logo,\n      features: (\n        <ul>\n          <li>Cool feature 1</li>\n          <li>Cool feature 2</li>\n          <li>Even cooler feature</li>\n          <li>Works offline</li>\n        </ul>\n      ),\n      description: \"This is a very good app that does a lot of useful stuff. \",\n    })\n      .then(() =>\n        alert(\"App installed successfully or instructions for install shown\")\n      )\n      .catch(() => alert(\"User opted out from installing\"));\n  };\n\n  return (\n    <div>\n      <p> Yolo </p>\n      {supported() && !isInstalled() && (\n        <button type=\"button\" onClick={handleClick}>\n          Install App\n        </button>\n      )}\n    </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReactPWAInstallProvider enableLogging>\n      <Toast />\n    </ReactPWAInstallProvider>\n    <Login />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}